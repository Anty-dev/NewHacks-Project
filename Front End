import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
from streamlit_lottie import st_lottie
import requests

# ==============================
# APP CONFIG
# ==============================
st.set_page_config(page_title="üí∞ Budget Buddy", page_icon="üí∏", layout="wide")

# ==============================
# STYLING
# ==============================
st.markdown("""
    <style>
    body {
        background-color: #f4f7fb;
        font-family: 'Poppins', sans-serif;
        color: #2c3e50;
    }
    .main {
        background-color: #ffffff;
        padding: 20px 40px;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    }
    h1, h2, h3 {
        color: #1e3d59;
        font-weight: 700;
    }
    .stButton>button {
        background: linear-gradient(90deg, #3a7bd5 0%, #00d2ff 100%);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 10px;
        font-size: 16px;
        font-weight: bold;
        transition: 0.3s;
    }
    .stButton>button:hover {
        background: linear-gradient(90deg, #00d2ff 0%, #3a7bd5 100%);
        transform: scale(1.03);
    }
    .metric-card {
        background-color: #f9fbfd;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        text-align: center;
    }
    hr {
        border: 1px solid #e0e0e0;
        margin: 30px 0;
    }
    </style>
""", unsafe_allow_html=True)

# ==============================
# HELPER FUNCTIONS
# ==============================
def load_lottie(url):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

# ==============================
# HEADER SECTION
# ==============================
col1, col2 = st.columns([2, 1])
with col1:
    st.title("üí∏ Budget Buddy")
    st.markdown("""
    Welcome to **Budget Buddy**, your personal finance sidekick.
    Visualize your spending, set smart budgets, and get actionable insights ‚Äî all in one sleek dashboard.
    """)

with col2:
    lottie_money = load_lottie("https://assets10.lottiefiles.com/packages/lf20_pNx6yH.json")
    st_lottie(lottie_money, height=180, key="money")

st.markdown("<hr>", unsafe_allow_html=True)

# ==============================
# SIDEBAR
# ==============================
with st.sidebar:
    st.header("‚öôÔ∏è Settings")
    st.markdown("Upload your **bank statement CSV** to begin tracking your budget.")
    file = st.file_uploader("üìÇ Upload CSV", type=["csv"])
    monthly_budget = st.number_input("üíµ Set Monthly Budget", min_value=0, value=2000, step=100)
    st.markdown("---")
    st.caption("‚ú® Pro tip: Keep your data columns named `Category` and `Amount` for auto-visualization!")

# ==============================
# MAIN DASHBOARD
# ==============================
if file:
    data = pd.read_csv(file)

    # Display preview
    st.subheader("üìä Data Preview")
    st.dataframe(data.head())

    # Calculate totals (your backend will replace this later)
    total_spent = data["Amount"].sum()
    by_category = data.groupby("Category")["Amount"].sum().sort_values(ascending=False)

    # ==============================
    # KPI CARDS
    # ==============================
    st.markdown("### üí° Summary Overview")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total Spent", f"${total_spent:,.2f}")
    with col2:
        st.metric("Monthly Budget", f"${monthly_budget:,.2f}")
    with col3:
        delta = total_spent - monthly_budget
        color = "üî¥" if delta > 0 else "üü¢"
        st.metric("Status", f"{color} {'Over Budget' if delta > 0 else 'Under Budget'}")

    st.markdown("<hr>", unsafe_allow_html=True)

    # ==============================
    # VISUALIZATIONS
    # ==============================
    st.subheader("üìÇ Spending by Category")

    # Plotly Bar Chart
    fig_bar = px.bar(
        by_category,
        x=by_category.index,
        y=by_category.values,
        title="Category Breakdown",
        color=by_category.values,
        color_continuous_scale="Blues",
        labels={"x": "Category", "y": "Amount ($)"},
        height=450
    )
    st.plotly_chart(fig_bar, use_container_width=True)

    # Pie Chart
    st.subheader("üç© Spending Distribution")
    fig_pie = px.pie(
        names=by_category.index,
        values=by_category.values,
        color_discrete_sequence=px.colors.qualitative.Pastel,
        title="Spending Distribution by Category"
    )
    fig_pie.update_traces(textinfo="percent+label", pull=[0.05]*len(by_category))
    st.plotly_chart(fig_pie, use_container_width=True)

    # ==============================
    # AI SUGGESTIONS (placeholder)
    # ==============================
    st.subheader("ü§ñ Smart Budget Suggestions")

    if total_spent > monthly_budget:
        st.warning(f"‚ö†Ô∏è You‚Äôve exceeded your budget by **${total_spent - monthly_budget:,.2f}** this month!")
        if "Dining Out" in by_category and by_category["Dining Out"] > 250:
            st.markdown("- üçΩÔ∏è Try cooking at home 2x a week ‚Äî you could save up to $100/month.")
        if "Entertainment" in by_category and by_category["Entertainment"] > 300:
            st.markdown("- üé¨ Consider free or low-cost entertainment options.")
    else:
        st.success(f"‚úÖ You‚Äôre under budget! You saved **${monthly_budget - total_spent:,.2f}** this month.")
        st.markdown("- üí° Invest or save your extra funds to build long-term wealth!")

else:
    st.info("‚¨ÜÔ∏è Upload your CSV file to start tracking your budget!")

# ==============================
# FOOTER
# ==============================
st.markdown("""
<hr>
<p style='text-align: center; color: #888;'>
Made with ‚ù§Ô∏è by the <b>Budget Buddy</b> Team for Hackathon 2025<br>
<a href='http://budgetbuddy.com'>budgetbuddy.com</a>
</p>
""", unsafe_allow_html=True)



import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# Set up the page config and style
st.set_page_config(page_title="Budget Buddy", layout="wide")

# Custom CSS to improve visuals
st.markdown("""
    <style>
    body {
        background-color: #f7f9fc;
        font-family: 'Arial', sans-serif;
        color: #333;
    }
    .stButton>button {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        padding: 12px 25px;
        border-radius: 8px;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #0056b3;
    }
    .stMetric {
        background-color: #ffffff;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }
    .stSubheader {
        color: #3f8efc;
        font-weight: bold;
    }
    .stHeader {
        font-size: 28px;
        font-weight: 600;
        color: #2c3e50;
    }
    .stText {
        color: #555;
    }
    .stBarChart rect {
        fill: #3498db !important;
    }
    .stPieChart rect {
        fill: #9b59b6 !important;
    }
    .stAlert {
        background-color: #ffeb3b;
        color: #333;
        padding: 10px;
        border-radius: 8px;
        font-weight: bold;
    }
    .stSuccess {
        background-color: #2ecc71;
        color: white;
        padding: 10px;
        border-radius: 8px;
        font-weight: bold;
    }
    .stMarkdown {
        font-size: 16px;
        color: #333;
    }
    .stContainer {
        margin-top: 30px;
        padding: 30px;
        background-color: #fff;
        border-radius: 15px;
        box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
    }
    </style>
""", unsafe_allow_html=True)

# Title and Introduction
st.title("Budget Buddy - Your Personal Finance Tracker")
st.markdown("""
Welcome to **Budget Buddy**, a smart way to track your spending, analyze your financial habits, and optimize your budget. 
Through AI-powered suggestions and easy-to-read visualizations, we help you make the most of your money.
""")

# Sidebar for user settings (simulated for now)
with st.sidebar:
    st.header("Settings")
    st.write("Upload your bank statement below to get started.")
    file = st.file_uploader("Upload your CSV bank statement", type=["csv"])
    if file is not None:
        data = pd.read_csv(file)
        st.write("Here is a preview of your data:")
        st.write(data.head())

# Main content area for visualizations and analysis

# Monthly Spending Summary Section
st.container()
st.header("Monthly Spending Summary")
total_spent = 2350  # This value should be dynamically calculated later
monthly_budget = 2000

# Metric display (Total spent)
st.metric(label="Total spent this month", value=f"${total_spent}", delta=f"-${100}")

# Spending Categories Breakdown
st.subheader("Spending by Categories")

categories = {
    "Groceries": 600,
    "Entertainment": 400,
    "Transportation": 250,
    "Dining Out": 300,
    "Other": 800
}

# Show data in columns
col1, col2 = st.columns(2)
with col1:
    for category, amount in categories.items():
        st.write(f"**{category}:** ${amount}")

with col2:
    # Bar chart for spending by category
    category_data = pd.DataFrame({
        "Category": list(categories.keys()),
        "Amount": list(categories.values())
    })
    st.bar_chart(category_data.set_index("Category"))

# More visualizations - Pie Chart
st.subheader("Spending Distribution")
fig, ax = plt.subplots()
ax.pie(categories.values(), labels=categories.keys(), autopct='%1.1f%%', startangle=90, colors=sns.color_palette("Set3", len(categories)))
ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
st.pyplot(fig)

# Budget Analysis
st.header("Budget Analysis")
if total_spent > monthly_budget:
    st.markdown(f"**‚ö†Ô∏è Warning**: You exceeded your budget by **${total_spent - monthly_budget}**!")
else:
    st.markdown(f"**‚úÖ Success**: You're under budget! You saved **${monthly_budget - total_spent}**.")

# Dynamic AI Suggestions
st.header("AI Suggestions to Optimize Your Budget")

def mock_ai_suggestions(total_spent, categories):
    suggestions = []
    if total_spent > monthly_budget:
        suggestions.append("üí° **Suggestion**: Cut back on your 'Dining Out' expenses.")
        if categories.get("Entertainment", 0) > 300:
            suggestions.append("üí° **Suggestion**: Consider reducing 'Entertainment' costs this month.")
        if categories.get("Groceries", 0) > 500:
            suggestions.append("üí° **Suggestion**: Meal planning could help reduce grocery spending.")
    else:
        suggestions.append("üí° **Suggestion**: Great job! You're within budget. How about saving your extra funds?")
        if categories.get("Other", 0) > 700:
            suggestions.append("üí° **Suggestion**: Review your 'Other' expenses. Can you reduce them?")

    return suggestions

# Display mock suggestions
for suggestion in mock_ai_suggestions(total_spent, categories):
    st.markdown(f"- {suggestion}")

# Footer
st.markdown("""
---
Made with ‚ù§Ô∏è by the Budget Buddy Team. 

Find more at: [budgetbuddy.com](http://budgetbuddy.com)
""")
